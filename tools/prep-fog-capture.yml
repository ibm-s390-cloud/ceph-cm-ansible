---
### This standalone playbook can be used to prep a COBBLER-IMAGED testnode
### so that it can be used to capture an OS image for FOG.
### This playbook is needed for a couple reasons
###   - NIC configs get hard coded into the captured FOG images so nodes reimaged by FOG don't come up with network

- hosts:
    - testnodes
  become: true
  gather_facts: false
  tasks:

  # (Missing in RHEL8)
  - name: Check for /usr/bin/python
    shell: echo marco
    register: polo
    ignore_errors: true

  - name: Set ansible_python_interpreter=/usr/bin/python3
    set_fact:
      ansible_python_interpreter: /usr/bin/python3
    when: polo is failed

  # Now that we know where python is, we can gather_facts
  - setup:

  # We need to leave /.cephlab_rc_local or else each FOG reimage would tell Cobbler to run ceph-cm-ansible
  - name: Remove lock files and udev rules
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /etc/udev/rules.d/70-persistent-net.rules
      - /.cephlab_net_configured
      - /ceph-qa-ready

  - name: Get list of ifcfg scripts from host used to capture image
    shell: "ls -1 /etc/sysconfig/network-scripts/ifcfg-* | grep -v ifcfg-lo"
    register: ifcfg_scripts
    when: ansible_os_family == "RedHat"
    ignore_errors: true

  - name: Get list of ifcfg scripts from host used to capture image
    shell: "ls -1 /etc/sysconfig/network/ifcfg-* | grep -v ifcfg-lo"
    register: ifcfg_scripts
    when: ansible_os_family == "Suse"
    ignore_errors: true

  - name: Delete ifcfg scripts
    file:
      path: "{{ item }}"
      state: absent
    with_items: "{{ ifcfg_scripts.stdout_lines|default([]) }}"
    when: ifcfg_scripts is defined

  - name: Remove /var/lib/ceph mountpoint from fstab
    shell: sed -i '/\/var\/lib\/ceph/d' /etc/fstab

  - name: Unmount /var/lib/ceph
    ansible.posix.mount:
      path: /var/lib/ceph
      state: unmounted

  - name: Get list of SSH host keys
    shell: "ls -1 /etc/ssh/ssh_host_*"
    register: ssh_host_keys
    ignore_errors: true

  # Key regeneration is done automatically on CentOS firstboot.
  # For Ubuntu, we'll add `dpkg-reconfigure openssh-server` to rc.local
  - name: Delete SSH host keys so they're generated during firstboot on cloned machines
    file:
      path: "{{ item }}"
      state: absent
    with_items: "{{ ssh_host_keys.stdout_lines|default([]) }}"
    when: ssh_host_keys is defined

  - name: Unsubscribe RHEL
    command: subscription-manager unregister
    when: ansible_distribution == "RedHat"
    failed_when: false

  # A file gets leftover when a testnode is registered with Satellite that caused
  # each registered subsequent testnode to report the wrong hostname
  - name: Clean up katello facts
    file:
      path: /etc/rhsm/facts/katello.facts
      state: absent
    when: ansible_distribution == "RedHat"

  # https://bugzilla.redhat.com/show_bug.cgi?id=1814337
  - name: Disable dnf-makecache service
    service:
      name: dnf-makecache.timer
      state: stopped
      enabled: no
    when:
      - ansible_os_family == "RedHat"
      - ansible_distribution_major_version|int >= 8

  # Hopefully fixes https://github.com/ceph/ceph-cm-ansible/pull/544#issuecomment-599076564
  - name: Clean DNF cache
    shell: "dnf clean all && rm -rf /var/cache/dnf/*"
    when:
      - ansible_os_family == "RedHat"
      - ansible_distribution_major_version|int >= 8

  - set_fact:
      ntp_service: ntp
    when: ansible_os_family == "Debian"

  - set_fact:
      ntp_service: ntpd
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int <= 7

  - set_fact:
      ntp_service: chronyd
    when: (ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 8) or
          ansible_os_family == "Suse"

  - name: "Stop {{ ntp_service }} service"
    service:
      name: "{{ ntp_service }}"
      state: stopped
    when: '"ntp" in ntp_service'

  # The theory here is although we do have the ntp service running on boot,
  # if the time is off, it slowly drifts back in sync.  Since our testnodes
  # are ephemeral, they don't ever have enough time to correctly drift
  # back to the correct time.  So we'll force it in the captured OS images.
  - name: Force time synchronization using stepping | ntp
    command: "ntpdate -b {{ ntp_servers|join(' ') }}"
    when: '"ntp" in ntp_service'

  - name: "Start {{ ntp_service }}"
    service:
      name: "{{ ntp_service }}"
      state: started

  # chronyd needs to be started in order to force time sync. This differs from ntpd.
  - name: Force time synchronization using stepping | chrony
    command: chronyc -a makestep
    when: '"chrony" in ntp_service'

  # - name: Sync the hardware clock
  #   command: "hwclock --systohc"
